
services:
  # zookeeper:
  #   image: bitnami/zookeeper:3.9
  #   container_name: zookeeper
  #   restart: unless-stopped
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  #   ports:
  #     - "2181:2181"
  #   networks:
  #     - search-network

  # kafka:
  #   image: bitnami/kafka:3.7
  #   container_name: kafka
  #   restart: unless-stopped
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
  #     - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #   ports:
  #     - "9092:9092"
  #   healthcheck:
  #     test: ["CMD", "bash", "-c", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10
  #   networks:
  #     - search-network
  search-engine:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_MODE: development  # Use 'production' for slower but fresh Redis tools installation
    container_name: core
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017
      - SEARCH_REDIS_URI=tcp://redis:6379
      - SEARCH_REDIS_POOL_SIZE=4
      - SEARCH_INDEX_NAME=search_index
      - MINIFY_JS=true
      - MINIFY_JS_LEVEL=none  # Use microservice instead
      - JS_MINIFIER_SERVICE_URL=http://js-minifier:3002
      # Cache configuration
      - JS_CACHE_ENABLED=true
      - JS_CACHE_TYPE=redis
      - JS_CACHE_TTL=3600
      - JS_CACHE_REDIS_DB=1
      # Debug configuration
      # Available log levels: trace, debug, info, warning, error, none
      # - debug: Maximum verbosity (development)
      # - info: Standard production logging (default)
      # - warning: Only warnings and errors
      # - error: Only errors
      # - none: No logging
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      # - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # - KAFKA_FRONTIER_TOPIC=crawl.frontier
      - SPA_RENDERING_ENABLED=${SPA_RENDERING_ENABLED:-true}
      - SPA_RENDERING_TIMEOUT=${SPA_RENDERING_TIMEOUT:-60000}
      - BROWSERLESS_URL=${BROWSERLESS_URL:-http://browserless:3000}
      - DEFAULT_REQUEST_TIMEOUT=${DEFAULT_REQUEST_TIMEOUT:-60000}
    depends_on:
      - redis
      - mongodb
      - js-minifier
      # - kafka
    networks:
      - search-network
    dns:
      - 8.8.8.8
      - 1.1.1.1
      - 8.8.4.4

  js-minifier:
    build:
      context: ./js-minifier-service
      dockerfile: Dockerfile
    container_name: js-minifier
    restart: unless-stopped
    pull_policy: never
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
    networks:
      - search-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]
    environment:
      - REDIS_MAXMEMORY=268435456  # 256MB in bytes
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
    networks:
      - search-network

  mongodb:
    image: mongodb/mongodb-enterprise-server:latest
    container_name: mongodb_test
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGODB_INITDB_ROOT_USERNAME=admin
      - MONGODB_INITDB_ROOT_PASSWORD=password123
    command: mongod --bind_ip_all
    networks:
      - search-network

  browserless:
    image: browserless/chrome:latest
    container_name: browserless
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - "MAX_CONCURRENT_SESSIONS=10"
      - "PREBOOT_CHROME=true"
      - "CONNECTION_TIMEOUT=15000"
      - "CHROME_REFRESH_TIME=60000"
      - "QUEUE_LIMIT=100"
      - "MAX_CPU_PERCENT=90"
      - "MAX_MEMORY_PERCENT=90"
      - "KEEP_ALIVE=true"
      - "ENABLE_DEBUGGER=false"
      - "ENABLE_CORS=true"
      - "WORKSPACE_DIR=/workspace"
      - "FUNCTION_ENABLE_INCOGNITO=false"
      - "FUNCTION_KEEP_ALIVE=true"
    networks:
      - search-network
    dns:
      - 8.8.8.8
      - 1.1.1.1
      - 8.8.4.4
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # mongodb-test:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.test.mongo
  #   depends_on:
  #     - mongodb
  #   environment:
  #     - MONGODB_URI=mongodb://mongodb:27017

networks:
  search-network:
    driver: bridge

volumes:
  mongodb_data:
  redis_data: 